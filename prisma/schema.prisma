generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ScrapedUrlType {
  SHOWTIMES
  TICKETING
}

model ScrapedUrl {
  url       String          @id
  createdAt DateTime        @default(now()) @map("created_at")
  expiresAt DateTime        @map("expires_at")
  content   String
  type      ScrapedUrlType

  @@map("scraped_urls")
}

enum TagCategory {
  GENRE
  SUB_GENRE
  CHARACTERISTIC
  AWARD
}

model MovieTag {
  id Int @id @default(autoincrement())

  name            String  @unique @db.VarChar(255)
  regExp          String? @map("reg_exp") @db.VarChar(255)
  isFilterEnabled Boolean @default(false) @map("is_filter_enabled")
  featured        Boolean @default(false)

  category TagCategory
  Movies   Movie[]

  @@map("movie_tags")
}

model ShowtimeTag {
  id Int @id @default(autoincrement())

  name            String  @unique @db.VarChar(255)
  regExp          String? @map("reg_exp") @db.VarChar(255)
  isFilterEnabled Boolean @default(false) @map("is_filter_enabled")
  featured        Boolean @default(false)

  Showtimes Showtime[]

  @@map("showtime_tags")
}

model Movie {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  allocineId        Int       @unique @map("allocine_id")
  themoviedbId      Int?      @map("themoviedb_id")
  releaseDate       DateTime? @map("release_date")
  title             String    @db.VarChar(255)
  originalTitle     String    @map("original_title") @db.VarChar(255)
  synopsis          String?
  duration          Int       @default(0)
  director          String?
  posterAllocineUrl String?   @map("poster_allocine_url")
  posterUrl         String?   @map("poster_url")
  posterBlurHash    String?   @map("poster_blur_hash")

  Showtimes Showtime[]
  Tags      MovieTag[]

  @@map("movies")
}

enum Language {
  VO
  VF
}

model Price {
  id          Int     @id @default(autoincrement())
  label       String
  description String?
  price       Float

  Showtime   Showtime? @relation(fields: [showtimeId], references: [id], onDelete: Cascade)
  showtimeId Int?

  @@map("prices")
}

model Showtime {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  allocineId   BigInt   @unique @map("allocine_id")
  date         DateTime
  isPreview    Boolean  @default(false) @map("is_preview")
  language     Language
  ticketingUrl String?

  Prices Price[]
  Tags   ShowtimeTag[]

  Theater   Theater @relation(fields: [theaterId], references: [id], onDelete: Cascade)
  theaterId Int     @map("theater_id")

  Movie   Movie @relation(fields: [movieId], references: [id], onDelete: Cascade)
  movieId Int   @map("movie_id")

  @@unique([date, movieId, theaterId])
  @@map("showtimes")
}

model Theater {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  allocineId String @unique @map("allocine_id") @db.VarChar(10)
  name       String @db.VarChar(255)
  address    String
  website    String @db.VarChar(255)

  Showtimes Showtime[]

  @@map("theaters")
}
